/*
 * -------------------------------------------------
 *  lifebit-ai/simulate Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Define image used by pipeline

docker.enabled = true
process.container = 'lifebitai/simulate:latest'

// Global default params, used in configs
params {

  // 1 - Workflow flags
  
  outdir                       = './results'
  reference_1000G              = "https://lifebit-featured-datasets.s3-eu-west-1.amazonaws.com/projects/gel/simulate/ALL_1000G_phase1integrated_v3_impute.tgz"
  legend_for_hapgen2           = "https://testdata-magda.s3-eu-west-1.amazonaws.com/all_leg.tar.gz"
  num_participants             = false
  effective_population_size    = false  
  mutation_rate                = false 
  simulate_vcf                 = true
  simulate_plink               = true
  simulate_gwas_sum_stats      = false
  gwas_cases                   = false
  gwas_controls                = false
  gwas_pheno_trait_type        = 'binary'
  gwas_heritability            = false
  gwas_disease_prevalance      = false
  gwas_simulation_replicates   = false

  // 2 - Boilerplate options

  name = false
  multiqc_config = false
  monochrome_logs = false
  help = false
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  tracedir = "${params.outdir}/pipeline_info"
  igenomes_ignore = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

}

process {

  withLabel: high_memory {
    cpus = 16
  }

}

// Load base.config by default for all pipelines

includeConfig 'conf/base.config'

// Load igenomes.config if required

if (!params.igenomes_ignore) {
  includeConfig 'conf/igenomes.config'
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'lifebit-ai/simulate'
  author = 'Magda Meier'
  homePage = 'https://github.com/lifebit-ai/simulate'
  description = 'A pipeline to simulate genomic data'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
